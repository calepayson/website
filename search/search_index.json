{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hi, I'm Cale.","text":"<p>If you'd like to know what I think, here's some of my Writing and here's what I've been Reading.</p> <p>You can take a look at my Bio to get a sense for what I've been up to.</p> <p>I also use this website to host some Media.</p> <p>Shoot me an email if you'd like to chat: calepayson(at)mac.com.</p> <p>If you're in the Bay Area and want to chat, let's grab a coffee!</p>"},{"location":"bio/","title":"Cale Smith","text":"<p>I want to help build AGI. Currently pursuing a masters in artificial intelligence at San Jose State. If you enjoy my writing and know of any opportunities, shoot me an email: calepayson(at)mac.com</p>"},{"location":"bio/#some-things-im-proud-of","title":"Some things I'm proud of","text":"<ul> <li>The research database at InnerPlant.</li> <li>Plants that can communicate with satellites at   InnerPlant.</li> <li>I indipendently discovered the first major functional mutation to SARS-CoV-2,   D614G.</li> <li>An OCR relay.</li> <li>An Ironman 70.3.</li> <li>My work in rescue.</li> </ul>"},{"location":"bio/#what-ive-done-for-work","title":"What I've done for work","text":""},{"location":"bio/#2025-bee-partners","title":"2025 - Bee Partners","text":"<p>I was brought on as a Summer software engineering intern to help build a tool to leverage their CRM data. The tool mirrors their CRM data in a database, uses LLMs to enhance that data (e.g. create metadata from board decks), then generates reports/recommended data from it.</p> <p>An example use is board meeting prep. Before, a partner would manually query their notes/emails/docs/etc. to get up to speed. Now, the tool generates a brief based upon the partner's notes/emails/docs/etc. in a matter of seconds but also adds some awesome supplemental info. It identifies contacts throughout the firm that may be able to advise, help with initiatives, have experienced similar issues, or seem to be a match for an open role. If it sounds boring, I promise, that addition feels magical.</p> <p>Since the team was me and three vibe-coding VCs I got to do a ton. When we started the project I primarily played a dev-ops role. I was responsible for figuring out our development protocols which is a very weird position to be in during your first software engineering internship. I mean, I was in the internship to learn how software is built in industry and my first task was to teach the rest of the team how software is built in industry.</p> <p>The meet of the role was building out the backend for the team. We used Supabase and FastAPI (plus the llms) as our backend. I migrated all their CRM data to our db and orchestrated regular syncs so that the CRM could remain the source of truth. Then I wrote some basic APIs to be able to access the db data easily. Because I knew it would be maintained by vibe-coders I also added some insanely detailed logging and wrote a comprehensive test suite (learnt a ton about mocking here).</p> <p>I joke that, on paper, it was the internship from hell but it truly rocked. The trial-by-fire experience of running dev-ops to start the internship meant helped me some strong opinions (loosely held) that following some check list never would have. And really, how often do interns get to lead a migration of all of a companies data? The faith the team put in me was awesome and I have nothing but the highest praise for them and their work (even if it was vibed).</p>"},{"location":"bio/#2020-2023-innerplant","title":"2020-2023 - InnerPlant","text":"<p>I joined InnerPlant as the tenth hire a little over a year after it was founded. I started as a molecular biologist but, for the simple fact that there was a ton to do, I got to touch every aspect of the bio-development pipeline and nearly every aspect of our research, form ideation to testing.</p> <p>Two years in I joined the business team. Again, I got to dive into every different aspect of this new field. I helped with business development, strategy, marketing, and lead some field trials and our social strategy.</p> <p>Through both these roles I got to work with our data and eventually helped build out the biotracking database (with a wonderful colleague). When I started, everything was tracked in independent spreadsheets. Over time we built a custom PostgreSQL database hosted on google cloud.</p> <p>While working on the database I fell in love with software and have been diving in ever since.</p>"},{"location":"bio/#2016-2020-national-park-service","title":"2016-2020 - National Park Service","text":"<p>I worked Ocean Rescue in the Bay Area. Mostly Stinson Beach bu occasionaly Ocean Beach. Best job I ever had. If you're in your early 20's its worth checking out. Shoot me an email for an intro.</p>"},{"location":"bio/#what-ive-done-just-cause","title":"What I've done just cause","text":""},{"location":"bio/#2020-coronavirus-bioinformatics-lab","title":"2020 - Coronavirus Bioinformatics Lab","text":"<p>Covid hit during my Senior year of college and UCSC had to scramble to provide labs that could be done remote. One of these was a bioinformatics lab focused around Covid. It was, hands down, the coolest class I ever took. Some classes are decades behind the industry, this one was only days behind.</p> <p>We tracked the evolution of the virus through near-realtime genotyping data, studied its structure, and built possible heritage trees to guess where it came from (probably a lab). I got so obsessed with tracking it that I independently discovered the mutation that was causing Europe and the East Coast to get so walloped early in the pandemic.</p>"},{"location":"bio/#2019-2020-toxic-rna-lab","title":"2019-2020 - Toxic RNA Lab","text":"<p>The Toxic RNA Lab is an awesome hybrid lab/research opportunity that UCSC offers. It's run by Dr. Jeremy Sanford who researches mis-splicing events (the biological equivalent of a compiler failing to remove fragements of comments). Genetic diseases caused by these events can be treated fairly cheaply so Dr. Sanford is building a library of orphan diseases (diseases considered too rare to be worth curing) in order to treat them.</p> <p>I worked on a few BRCA2 mutations and loved it.</p>"},{"location":"bio/#2012-2016-marin-search-and-rescue","title":"2012-2016 - Marin Search and Rescue","text":"<p>I joined SAR when I was 14 and was (briefly) the youngest full member of a SAR team in the US. It's an incredible opportunity to do meaningful things in beautiful places throughout California. Check it out if you have (lots of) free time.</p>"},{"location":"media/","title":"Media","text":""},{"location":"media/#the-graveside","title":"The Graveside","text":"<p>I think wealth inequality is the most important issue of our time<sup>1</sup>.</p> <p>In 1968 MLK was organizing the Poor People's Campaign, a movement that aimed to secure economic and human rights for poor people. In essence, a decleration that all people should have what they need to live. A call for an economic bill of rights.</p> <p>While working on this campaign he declared the Memphis sanitation strike a major aspect of the campaign. Days before King arrived there was a storm of press, \"implying that the Memphis outbursts foreshadowed mass violence by the Poor People's Campaign in Washington.\"<sup>2</sup>. King was assassinated the night after he arrived.</p> <p>I like to think that the Poor People's Campaign could have been a turning point in American history. An Occupy Wall-Street but earlier, with a more cohesive vision, led by the last great American civil rights icon. In King's own words:</p> <p>We have moved from the era of civil rights to an era of human rights.</p> <p>The background of this collage was taken in Chicago the night of MLK's death. Though the Poor People's Campaign would carry on, the goal became affirmative action rather than King's original goal of an economic bill of rights.</p> <p>The graveside is King's but it is also the idea of the Poor People's Campaign. The idea of expanding the civil rights campaign to include economic rights.</p> <p>It's a death that haunts today's America more than any other.</p>"},{"location":"media/#stay-curious","title":"Stay Curious","text":"<p>I wanted this to be a play on the conventional definition of life and the Gaia Hypothesis with a nod to memetics.</p> <p>The conventional definition of life consists of a laughably inconsistent set of criteria that living things fulfill, one of them (usually) being \"Reproduction\". The Gaia Hypothesis argues that Earth could be considered one massive super-organism.</p> <p>Through these lenses, our current space programs are the Earth's first attempts at reproduction. If we manage to terraform a new planet, the earth will satisfy that criteria and should \"officially\" be considered alive.</p> <p>But I think the conventional definition of life sucks. Imitated behavior operates on the same principles of evolution as biological life yet very few people consider things like cultures or companies alive. The butterflies are meant to symbolize memetic life (there's only so many good analogies in nat geo).</p> <p>Stay curious, there is new life.</p> <ol> <li> <p>I would rate it above issues like climate change. I doubt we'll be able to effectively address climate change at current levels of wealth inequality.\u00a0\u21a9</p> </li> <li> <p>Quoted from the Wikipedia article.\u00a0\u21a9</p> </li> </ol>"},{"location":"reading/","title":"Reading","text":""},{"location":"reading/#the-little-go-book","title":"The Little Go Book","text":"Karl Seguin <p>A short and sweet exposition of Go's basic features.</p>"},{"location":"reading/#old-mans-war","title":"Old Man's War","text":"John Scalzi <p>A quick Sci-Fi romp with plenty of soul and no chaff</p>"},{"location":"reading/#fast","title":"fast","text":"Catherine Jue <p>A short essay on why software should be fast</p>"},{"location":"reading/posts/fast/","title":"fast - Catherine Jue","text":"<p>I chose to switch careers from biology to software engineering because of speed. In biology an experiment can take months or years to run. In software it usually takes seconds. When you're early in your career that delta is the difference between building intuition or not. At least that's what it felt like to me.</p> <p>Catherine's essay felt like a better, more refined version, of what I was thinking when I switched careers.</p>"},{"location":"reading/posts/old_mans_war/","title":"Old Man's War - John Scalzi","text":"<p>Old Man's War is not a masterpiece.</p> <p>I have tendency to over-index on big serious books, novels and non-fiction. I guess they make me feel big and serious as I read them. I also tend to not finish them, read them in quick determined bursts of a couple pages a day, or make it halfway through put it down for months and then struggle through the rest in a confused haze.</p> <p>Old Man's War's is short, nihilistic, and ties off loose ends and you should definitely read it. It's got a soul, Scalzi plays with familiar tropes, calls them out as stupid and then reenacts them because, godamn, they are tropes for a reason.</p> <p>Best of all it dodges all the pitfalls of serious Sci-Fi. It doesn't fall into the Moby Dick trap of spending whole chapters describing well thought out ecosystems and species but it also falls short of the absurdism of books like A Hitchhikers Guide to the Galaxy. It's not a book about tech and alien worlds, rather it has simple relatable characters that happen to exist in a Sci-Fi setting and don't feel the need to obsessively comment about it.</p> <p>Old Man's War is not a masterpiece, it's fun.</p> <p>I recommend it.</p>"},{"location":"reading/posts/the_little_go_book/","title":"The Little Go Book","text":"<p>I'm susceptible to side-quests.</p> <p>Give me a language like C++ and I will spend hours researching the \"proper way\" to write a class interface or constructing a completely unnecessary inheritance hierarchy. For this reason, C is my favorite language to write. There really aren't any side-quests in C which forces me to sit down and just write the damn code. It's lovely.</p> <p>But while C is lovely to write, it's hard to build in. C's ergonomics are dated, forcing you to wrestle with the all encompassing make file. Its standard library is simply missing a lot of functionality that you'll get out of the box with other languages.</p> <p>After hearing Go described as C with modern ergonomics I decided to give it a try.</p> <p>Go is not easily approachable. Look, it's not hard to approach either. But take Rust. To learn Rust you get The Book. You read The Book. The book exposes you to all the important Rust concepts and it's a choose your own adventure from there.</p> <p>Go, on the other hand, has a few resources, none of which brought me joy<sup>1</sup>. The documentation dives right into implementing a module without any philosophy to give it a backbone. The Tour of Go and Go by Example both felt too impersonal, more like a bulleted list of features rather than the guiding hand of a mentor.</p> <p>Then I found The Little Go Book and, my god, it brought intense joy. It is truly little. It clocks in at less than 90 pages and could probably be less than 60 with some aggressive formatting. The style reminded me of The C Programming Language; Short, to the point, efficient and yet overflowing with soul. It is sparing with what it introduces you to and incisive with its examples.</p> <p>I read it in a day and truly felt like I had a grasp of the fundamentals of Go. Kudos, Karl Seguin.</p> <p>I highly recommend it to anyone interested in learning Go.</p> <ol> <li> <p>If you are learning without giggling like a child, I'd argue that you're doing it wrong.\u00a0\u21a9</p> </li> </ol>"},{"location":"writing/","title":"Writing","text":""},{"location":"writing/#darwin-machines","title":"Darwin Machines","text":"Created: 2024-07-16 <p>Ramblings on William Calvin's theory of Darwin Machines.</p>"},{"location":"writing/posts/darwin_machines/","title":"Darwin Machines","text":"<p>I'm writing this because I've been obsessed with the theory of a Darwin Machine for nearly a year now and I haven't met anyone else who has heard of it.</p> <p>This is my attempt to summarize and share the theory that William Calvin laid out in \"The Cerebral Code\". If you haven't read it and are interested in how the brain works, AI, or ML you should order a copy right now. I'm going to do the book no justice but hopefully, if you haven't already ordered the book, the rest of this post will convince you to read it.</p> <p>If you, or anyone you know, is interested in these ideas or wants to build/is building a Darwin Machine, please reach out. My email is calepayson(at)mac.com.</p>"},{"location":"writing/posts/darwin_machines/#some-background","title":"Some Background","text":""},{"location":"writing/posts/darwin_machines/#on-evolution","title":"On Evolution:","text":"<p>Near the end of his career Schrodinger wrote a book, \"What is Life?\", that provides a great lens through which to view biology: Life is unnatural... If you're a physicist.</p> <p>One of the defining pillars of physics is the second law of thermodynamics. Energy hates being concentrated. Yet here we are, squishy bags of water and energy suspended a few feet above the ground. It's a bit weird.</p> <p>Schrodinger decided the only way that life was possible was if it led to more entropy throughout the system. Like a tornado, life is a pocket of order that sows disorder. It lives so long as it pays the entropy tax.</p> <p>To anthropomorphize a bit, The Universe is trying to maximize entropy but it has a near infinite \"problem space\". One algorithm it has found to solve this problem is evolution. To butcher a computer science phrase, I believe that evolution is the \"best case runtime\" when trying to find increasingly valid solutions to a near infinite problem space.</p> <p>Essentially, biology uses evolution because it is the best way to solve the problem of prediction (survival/reproduction) in a complex world.</p>"},{"location":"writing/posts/darwin_machines/#on-constraints","title":"On Constraints","text":"<p>I love constraints in science because they can give us hope for a theory before it has been worked out. For example, before we knew what genetic material, we knew it had to fit in cells, be chemically stable, and had to be capable of making high fidelity copies of itself. It took four years after Watson and Crick discovered the double helix for us to prove it was genetic material but we knew their discovery held promise because it fit within the constraints.</p> <p>I see a few constraints governing how the brain works.</p> <p>First, and most importantly, the brai is also faced with a near infinite problem space. There are limitless behaviors, only some of which are \"fit\" for any given scenario. Any theory of intelligence should explain how the brain solves this in the most efficient manner possible.</p> <p>The other constraints are based on a few studies and observations that seem important.</p> <p>Karl Lashley showed that memory is massively parallel and, contrary to the idea of a \"grandmother cell\", is not stored in a single location.</p> <p>David Eagleman showed that other function in the brain, like perception, are also massively parallel.He dubbed this the \"Mr. Potato Head\" theory because no matter where you \"plug in\" sensory input, your brain tends to figure out what to do with it. Plug some eyes into the olfactory cortex and a nose in the visual cortex and the brain will keep right on trucking.</p> <p>Two additional things to add:</p> <p>Brain patterns are spatio-temporal patterns. If I turn off cell firings, say with anesthesia, you lose your train of thought.</p> <p>But they store those patterns spatially. When you come out of anesthesia, you're still you.</p> <p>Think of it like RAM vs. Disk.</p>"},{"location":"writing/posts/darwin_machines/#on-brains","title":"On Brains","text":"<p>If you were to flatten out the neocortex of the brain - the new bit that we think is important for intelligence - on a table you would notice two things.</p> <p>First, if you look at a cross-section of the brain (eye-level with the table), the brain is divided into ~6 layers. This layering forms the dominant narrative of how intelligence may work and is the basis for deep neural nets. The idea is, stimulus is piped into the \"top\" layer and filters down to the bottom layer, with each layer picking up on more and more abstract concepts. Three Blue One Brown does a good job of articulating this idea in a video.</p> <p>Second, if you look down on the brain from above, it's divided into columns. The smallest unit of these are minicolumns, bundles of 80-120 neurons that run perpendicular to the layers of the brain, from the \"top\" to the \"bottom\" (or vice versa, it doesn't matter). These minicolumns can then be grouped into cortical columns, roughly hexagonal bundles of minicolumns, also running perpendicular to the layers of the brain.</p> <p>And that's about it. The brain is incredibly, wonderfully complex. The neocortex is insanely complex too. And... it's also basically a crumpled up sheet with the structure described above. At least that's the level of abstraction we're working with.</p> <p>From the perspective of a bystander, moderen machine learning seems to believe that the recipe for more intelligence is adding more layers or depth. But based on the homogeneity of the neocortex it seems that, at least in biology, the recipe for more intelligence is adding more columns side by side. A rat has the same number of layers as a chimp as a human, but the surface area of a rat's neocortex, a proxy for the number of columns, is less than a chimp which is less than a human.</p> <p>To prevent confusion, I'm saying that adding more columns is the recipe for more \"animal intelligence\". \"Human intelligence\" is different than animal intelligence owing to our capacity for high fidelity imitation. I plan on writing more on this in the future.</p>"},{"location":"writing/posts/darwin_machines/#on-darwin-machines","title":"On Darwin Machines","text":"<p>If modern ML explains intelligence with layers, the theory of a Darwin Machine explains intelligence with columns.</p> <p>As a reminder, a theory for intelligence should satisfy the following:</p> <ol> <li>Implements an efficient algorithm to search a near infinite problem space.</li> <li>Both memory and processing are massively parallel.</li> <li>Computation uses spatio-temporal patterns.</li> <li>But memory is spatial.</li> </ol> <p>The theory of Darwin Machines developed by William Calvin proposes that the brain, like life, implements evolution to search a near infinite problem space.</p> <p>Calvin believes that minicolumns are the arena for this evolution. Sensory inputs hit the brain, visual input in one area, olfactory in another, etc. and trigger specific firing patterns in the minicolumns. Imagining the surface of brain laid flat on a table, we can look down on it and see these columns lighting up, as if with Morse Code messages. These messages then propagate across the surface area of the brain, competing with conflicting messages to take over the greatest surface area.</p> <p>After some period of time a winner is chosen, let's say the message that controls the greatest surface area, the greatest number of minicolumns. When this happends, the winning minicolumns are rewarded, likely prompting them to encode a tendency for that firing pattern into their structure.</p>"}]}